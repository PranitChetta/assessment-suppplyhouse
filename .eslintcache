[{"D:\\workspace\\React\\my-dnd-app\\src\\index.js":"1","D:\\workspace\\React\\my-dnd-app\\src\\App.js":"2","D:\\workspace\\React\\my-dnd-app\\src\\Contact.js":"3","D:\\workspace\\React\\my-dnd-app\\src\\FormBuilder.js":"4","D:\\workspace\\React\\my-dnd-app\\src\\Preview.js":"5","E:\\pranit\\my-dnd-app\\my-dnd-app\\src\\index.js":"6","E:\\pranit\\my-dnd-app\\my-dnd-app\\src\\App.js":"7","E:\\pranit\\my-dnd-app\\my-dnd-app\\src\\Preview.js":"8","E:\\pranit\\my-dnd-app\\my-dnd-app\\src\\FormBuilder.js":"9","E:\\pranit\\my-dnd-app\\my-dnd-app\\src\\Contact.js":"10"},{"size":410,"mtime":1610479190788,"results":"11","hashOfConfig":"12"},{"size":572,"mtime":1610538647101,"results":"13","hashOfConfig":"12"},{"size":1337,"mtime":1610539922267,"results":"14","hashOfConfig":"12"},{"size":3746,"mtime":1610561087346,"results":"15","hashOfConfig":"12"},{"size":185,"mtime":1610538892420,"results":"16","hashOfConfig":"12"},{"size":410,"mtime":1610479190788,"results":"17","hashOfConfig":"18"},{"size":572,"mtime":1610538647101,"results":"19","hashOfConfig":"18"},{"size":185,"mtime":1610538892420,"results":"20","hashOfConfig":"18"},{"size":6705,"mtime":1610577543291,"results":"21","hashOfConfig":"18"},{"size":1864,"mtime":1610577622282,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"12ruph2",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13qvj8s",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\workspace\\React\\my-dnd-app\\src\\index.js",[],["45","46"],"D:\\workspace\\React\\my-dnd-app\\src\\App.js",[],"D:\\workspace\\React\\my-dnd-app\\src\\Contact.js",["47"],"import { Button } from \"react-bootstrap\";\r\nimport React, { Fragment, useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction Contact(props) {\r\n    function remove(elementCount) {\r\n\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={\"copy_\" + props.copyCount}>\r\n                <input typp=\"text\" className=\"form-control\" name=\"que_1\" placeholder=\"Question 1\" />\r\n\r\n                <input type=\"radio\" name=\"ques_1\" id=\"setting_1\" value=\"Setting 1\" /> <label for=\"setting_1\">Setting 1</label><br />\r\n                <input type=\"radio\" name=\"ques_1\" id=\"setting_2\" value=\"Setting 2\" /> <label for=\"setting_2\">Setting 2</label><br />\r\n                <input type=\"radio\" name=\"ques_1\" id=\"setting_3\" value=\"Setting 3\" /> <label for=\"setting_3\">Setting 3</label><br />\r\n\r\n                <Button variant=\"dark btn btn-sm\">Duplicate</Button>{\" \"}\r\n                <Button variant=\"dark btn btn-sm\" onClick={remove(\"copy_\" + props.copyCount)}>Remove</Button>{\" \"}\r\n                <label class=\"switch\">\r\n                    <input type=\"checkbox\" />\r\n                    <span class=\"slider round\"></span>\r\n                </label>{\" \"}\r\n                <Button variant=\"dark btn btn-sm\">Required</Button>{\" \"}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Contact;\r\n","D:\\workspace\\React\\my-dnd-app\\src\\FormBuilder.js",["48","49"],"D:\\workspace\\React\\my-dnd-app\\src\\Preview.js",[],"E:\\pranit\\my-dnd-app\\my-dnd-app\\src\\index.js",[],"E:\\pranit\\my-dnd-app\\my-dnd-app\\src\\App.js",[],"E:\\pranit\\my-dnd-app\\my-dnd-app\\src\\Preview.js",[],"E:\\pranit\\my-dnd-app\\my-dnd-app\\src\\FormBuilder.js",["50","51","52","53","54","55"],"E:\\pranit\\my-dnd-app\\my-dnd-app\\src\\Contact.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":2,"column":27,"nodeType":"62","messageId":"63","endLine":2,"endColumn":35},{"ruleId":"60","severity":1,"message":"64","line":8,"column":23,"nodeType":"62","messageId":"63","endLine":8,"endColumn":35},{"ruleId":"60","severity":1,"message":"65","line":10,"column":14,"nodeType":"62","messageId":"63","endLine":10,"endColumn":18},{"ruleId":"66","severity":1,"message":"67","line":13,"column":13,"nodeType":"68","endLine":16,"endColumn":16},{"ruleId":"66","severity":1,"message":"69","line":23,"column":8,"nodeType":"70","endLine":23,"endColumn":17,"suggestions":"71"},{"ruleId":"60","severity":1,"message":"72","line":25,"column":12,"nodeType":"62","messageId":"63","endLine":25,"endColumn":21},{"ruleId":"60","severity":1,"message":"64","line":25,"column":23,"nodeType":"62","messageId":"63","endLine":25,"endColumn":35},{"ruleId":"60","severity":1,"message":"73","line":26,"column":12,"nodeType":"62","messageId":"63","endLine":26,"endColumn":24},{"ruleId":"60","severity":1,"message":"74","line":27,"column":12,"nodeType":"62","messageId":"63","endLine":27,"endColumn":30},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'setCopyCount' is assigned a value but never used.","'test' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 's' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook useEffect has a missing dependency: 's'. Either include it or remove the dependency array.","ArrayExpression",["77"],"'copyCount' is assigned a value but never used.","'strFormTitle' is assigned a value but never used.","'strFormDescription' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},"Update the dependencies array to be: [counter, s]",{"range":"80","text":"81"},[658,667],"[counter, s]"]